# ================================
# CONTINUOUS DEPLOYMENT PIPELINE
# ================================
# Bu pipeline CI başarılı olduktan sonra otomatik deployment yapar

name: 🚀 Continuous Deployment

# ================================
# TRIGGER CONDITIONS
# ================================
on:
  # CI workflow'u başarılı olduktan sonra
  workflow_run:
    workflows: ["🔄 Continuous Integration"]
    branches: [main]
    types: [completed]
  
  # Manuel deployment için
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if CI failed'
        required: false
        default: false
        type: boolean

# ================================
# ENVIRONMENT VARIABLES
# ================================
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# ================================
# JOB DEFINITIONS
# ================================
jobs:

  # ================================
  # DEPLOYMENT VALIDATION
  # ================================
  validate-deployment:
    name: 🔍 Validate Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event.inputs.force_deploy == 'true' }}
    
    outputs:
      should-deploy: ${{ steps.validate.outputs.deploy }}
      target-environment: ${{ steps.validate.outputs.environment }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Validate Deployment Conditions
      id: validate
      run: |
        # Determine target environment
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
        
        # Check if we should deploy
        if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]] || [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          echo "deploy=true" >> $GITHUB_OUTPUT
          echo "✅ Deployment validation passed"
        else
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "❌ Deployment validation failed"
        fi

  # ================================
  # STAGING DEPLOYMENT
  # ================================
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: needs.validate-deployment.outputs.should-deploy == 'true' && needs.validate-deployment.outputs.target-environment == 'staging'
    environment:
      name: staging
      url: https://staging.yourapp.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🚀 Deploy to Staging Server
      run: |
        echo "🎭 Deploying to Staging Environment"
        
        # Create deployment directory
        mkdir -p deployment
        
        # Prepare docker-compose for staging
        envsubst < docker-compose.yml > deployment/docker-compose.staging.yml
        
        # Deploy using Docker Compose
        docker-compose -f deployment/docker-compose.staging.yml pull
        docker-compose -f deployment/docker-compose.staging.yml up -d
      env:
        DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
        API_URL: https://api-staging.yourapp.com
    
    - name: 🧪 Run Smoke Tests
      run: |
        echo "🧪 Running staging smoke tests..."
        
        # Wait for services to be ready
        timeout 300 bash -c 'until curl -f http://localhost:5102/health; do sleep 5; done'
        
        # Test API endpoints
        curl -f http://localhost:5102/health
        
        # Test login functionality
        response=$(curl -s -X POST http://localhost:5102/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"admin","password":"123456"}')
        
        if echo "$response" | grep -q "Giriş başarılı"; then
          echo "✅ Smoke tests passed"
        else
          echo "❌ Smoke tests failed"
          exit 1
        fi
    
    - name: 📝 Update Deployment Status
      run: |
        echo "## 🎭 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://staging.yourapp.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed At**: $(date)" >> $GITHUB_STEP_SUMMARY

  # ================================
  # PRODUCTION DEPLOYMENT
  # ================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-deployment, deploy-staging]
    if: needs.validate-deployment.outputs.target-environment == 'production' && needs.deploy-staging.result == 'success'
    environment:
      name: production
      url: https://yourapp.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📋 Pre-deployment Checklist
      run: |
        echo "📋 Production Pre-deployment Checklist"
        echo "✅ CI Pipeline passed"
        echo "✅ Staging deployment successful"
        echo "✅ Security scans completed"
        echo "✅ Images built and pushed"
        echo "🚀 Ready for production deployment"
    
    - name: 🏭 Deploy to Production Server
      run: |
        echo "🏭 Deploying to Production Environment"
        
        # Blue-Green Deployment Strategy
        # 1. Deploy to green environment
        # 2. Run health checks
        # 3. Switch traffic from blue to green
        
        # Prepare production docker-compose
        envsubst < docker-compose.yml > docker-compose.production.yml
        
        # Deploy with zero-downtime strategy
        docker-compose -f docker-compose.production.yml pull
        docker-compose -f docker-compose.production.yml up -d --scale api=2 --scale web=2
      env:
        DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
        API_URL: https://api.yourapp.com
    
    - name: 🔍 Production Health Checks
      run: |
        echo "🔍 Running production health checks..."
        
        # Extended health checks for production
        for i in {1..10}; do
          if curl -f http://localhost:5102/health; then
            echo "✅ Health check $i passed"
          else
            echo "❌ Health check $i failed"
            exit 1
          fi
          sleep 10
        done
        
        echo "✅ All production health checks passed"
    
    - name: 📊 Post-deployment Monitoring
      run: |
        echo "📊 Setting up post-deployment monitoring..."
        
        # Trigger monitoring alerts
        # Send notifications to team
        # Update status pages
        
        echo "✅ Monitoring configured"
    
    - name: 📝 Update Deployment Status
      run: |
        echo "## 🏭 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://yourapp.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed At**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Strategy**: Blue-Green Deployment" >> $GITHUB_STEP_SUMMARY

  # ================================
  # IIS DEPLOYMENT (Alternative)
  # ================================
  deploy-to-iis:
    name: 🖥️ Deploy to IIS
    runs-on: windows-latest
    needs: validate-deployment
    if: needs.validate-deployment.outputs.should-deploy == 'true' && contains(github.event.head_commit.message, '[iis-deploy]')
    environment:
      name: iis-production
      url: https://iis.yourapp.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: 🔨 Build API for IIS
      run: |
        cd src/api
        dotnet publish -c Release -o ./publish
    
    - name: 🔨 Build Web for IIS
      run: |
        cd src/web
        npm ci
        npm run build
    
    - name: 🖥️ Deploy to IIS Server
      run: |
        # PowerShell deployment script for IIS
        Write-Host "🖥️ Deploying to IIS Server"
        
        # Stop IIS sites
        Import-Module WebAdministration
        Stop-Website -Name "DevApi" -ErrorAction SilentlyContinue
        Stop-Website -Name "DevWeb" -ErrorAction SilentlyContinue
        
        # Copy API files
        Copy-Item -Path "src/api/publish/*" -Destination "C:\inetpub\wwwroot\dev-api\" -Recurse -Force
        
        # Copy Web files
        Copy-Item -Path "src/web/.next/*" -Destination "C:\inetpub\wwwroot\dev-web\" -Recurse -Force
        
        # Start IIS sites
        Start-Website -Name "DevApi"
        Start-Website -Name "DevWeb"
        
        Write-Host "✅ IIS Deployment completed"
    
    - name: 🧪 IIS Health Check
      run: |
        # Test IIS deployment
        $apiHealth = Invoke-RestMethod -Uri "http://localhost:5102/health" -Method GET
        $webHealth = Invoke-WebRequest -Uri "http://localhost:5202" -Method GET
        
        if ($apiHealth -and $webHealth.StatusCode -eq 200) {
          Write-Host "✅ IIS Health checks passed"
        } else {
          Write-Host "❌ IIS Health checks failed"
          exit 1
        }

  # ================================
  # ROLLBACK JOB
  # ================================
  rollback:
    name: ⏪ Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: ⏪ Execute Rollback
      run: |
        echo "⏪ Executing rollback procedure"
        
        # Get previous successful deployment
        # Restore previous Docker images
        # Switch traffic back to previous version
        
        echo "✅ Rollback completed"
        
        # Notify team about rollback
        echo "🚨 **ROLLBACK EXECUTED** 🚨" >> $GITHUB_STEP_SUMMARY
        echo "Deployment failed and has been rolled back to previous version." >> $GITHUB_STEP_SUMMARY

  # ================================
  # NOTIFICATION JOB
  # ================================
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, deploy-to-iis]
    if: always()
    
    steps:
    - name: 📢 Send Deployment Notification
      run: |
        # Determine deployment status
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]] || [[ "${{ needs.deploy-production.result }}" == "success" ]] || [[ "${{ needs.deploy-to-iis.result }}" == "success" ]]; then
          status="✅ SUCCESS"
          color="good"
        else
          status="❌ FAILED"
          color="danger"
        fi
        
        echo "📢 Deployment Status: $status"
        
        # Here you would send notifications to:
        # - Slack/Teams
        # - Email
        # - Discord
        # - PagerDuty (for production failures)
        
        echo "## 📢 Deployment Notification" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: $status" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY 